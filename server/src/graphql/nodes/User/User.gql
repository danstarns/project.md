type User {
    _id: ID!
    username: String!
    email: String!
    profilePic: ProfilePic
    isRequester: Boolean
}

type ProfilePic {
    data: String!
    mimetype: String!
}

type AuthResponse {
    jwt: String!
    user: User!
}

# SIGN UP 
# ------------------------------------
input SignUpInput {
    username: String!
    email: String!
    password: String!
    profilePic: Upload
}

type SignUpResponse {
    data: AuthResponse
    error: Error
}

# SIGN IN
# ------------------------------------
input SignInInput {
    email: String!
    password: String!
}

type SignInResponse {
    data: AuthResponse
    error: Error
}

# FORGOT PASSWORD REQUEST
# ------------------------------------
input ForgotPasswordRequestInput {
    search: String!
}

# FORGOT PASSWORD CALLBACK
# ------------------------------------
input ForgotPasswordCallbackInput {
    token: String!
    password: String!
}

# EDIT PROFILE
# ------------------------------------
input EditProfileInput {
    username: String
    email: String
    password: String
    profilePic: Upload
}

type Mutation {
    signUp(input: SignUpInput): SignUpResponse!
    signIn(input: SignInInput): SignInResponse!
    forgotPasswordRequest(input: ForgotPasswordRequestInput!): Boolean!
    forgotPasswordCallback(input: ForgotPasswordCallbackInput!): Boolean!
    editProfile(input: EditProfileInput!): User! @Auth(input: {required: true})
}

type Query {
    me: User! @Auth(input: {required: true, populate: true})
    user(id: ID!): User
}