type Organization {
    _id: ID!
    name: String!
    tagline: String!
    creator: User! 
    admins: [User]!
    users: [User]!
    private: Boolean!
    markdown: String!
    createdAt: GraphQLDateTime!
    updatedAt: GraphQLDateTime!
    projects(input: OrganizationProjectsInput!): OrganizationProjectsConnection!
    isUserAdmin: Boolean!
    userCanChat: Boolean!
    logo: String
    projectCount: Int!
    userCount: Int!
}

type OrganizationProjectsConnection {
    hasNextPage: Boolean!
    projects: [Project]!
}

input OrganizationProjectsInput {
    page: Int! 
    limit: Int!
    search: String
    sort: String!
    user: Boolean
}

# CREATE ORGANIZATION
# ------------------------------------
input CreateOrganizationInput {
    name: String!
    tagline: String!
    private: Boolean!
    markdown: String!
    logo: Upload
}

# EDIT ORGANIZATION
# ------------------------------------
input EditOrganizationInput {
    id: ID!
    name: String!
    tagline: String!
    private: Boolean!
    markdown: String!
    logo: Upload
}

# ORGANIZATIONS
# ------------------------------------
input OgranizationsInput {
    page: Int!
    limit: Int!
    sort: DateSortEnum!
    search: String
}

# INVITE USER
# ------------------------------------
input InviteUserOrganizationInput {
    id: ID!
    email: String!
}

input InviteUserCallbackOrganizationInput {
    id: ID!
    approve: Boolean
}

# ASSIGN ADMIN
# ------------------------------------
input AssignAdminOrganizationInput {
    id: ID!
    user: ID!
}

# REVOKE ADMIN
# ------------------------------------
input RevokeAdminOrganizationInput {
    id: ID!
    user: ID!
}

type OgranizationsResponse {
    hasNextPage: Boolean!
    organizations: [Organization]!
}

type Query {
    organization(id: ID!, key: ID): Organization
    userOrganizations(input: OgranizationsInput!): OgranizationsResponse! @Auth(input: {required: true})
    publicOrganizations(input: OgranizationsInput!): OgranizationsResponse!
}

type Mutation {
    createOrganization(input: CreateOrganizationInput!): Organization! @Auth(input: {required: true})
    editOrganization(input: EditOrganizationInput!): Organization! @Auth(input: {required: true})
    inviteUserOrganization(input: InviteUserOrganizationInput!): Boolean! @Auth(input: {required: true, populate: true})
    inviteUserOrganizationCallback(input: InviteUserCallbackOrganizationInput!): Boolean! @Auth(input: {required: true})
    assignAdminOrganization(input: AssignAdminOrganizationInput!): Boolean! @Auth(input: {required: true})
    revokeAdminOrganization(input: RevokeAdminOrganizationInput!): Boolean! @Auth(input: {required: true})
}