type Project {
    _id: ID!
    name: String!
    tagline: String
    creator: User!
    private: Boolean!
    due: DateTimeString
    markdown: String!
    createdAt: DateTimeString! # TODO SCALAR DATE
    updatedAt: DateTimeString! # TODO SCALAR DATE
}

# COMMON 
enum DateSortEnum {
    desc
    asc
}


# CREATE PROJECT
# ------------------------------------
input CreateProjectInput {
    name: String!
    tagline: String
    private: Boolean!
    due: String
    markdown: String!
}

type CreateProjectError {
    message: String!
}

type ProjectData {
    project: Project!
}

type CreateProjectResponse {
    project: Project
    error: CreateProjectError
}

# USER PROJECTS
# --

type UserProjectsData {
    projects: [Project]!
}

type UserProjectsResponse {
    hasNextPage: Boolean!
    data: UserProjectsData!
}

input UserProjectsInput {
    page: Int!
    limit: Int!
    sort: DateSortEnum!
    search: String
}

type Query {
    project(id: ID!): Project
    userProjects(input: UserProjectsInput!): UserProjectsResponse!
    publicProjects(input: UserProjectsInput!): UserProjectsResponse!
}

type Mutation {
    createProject(input: CreateProjectInput!): CreateProjectResponse!
}