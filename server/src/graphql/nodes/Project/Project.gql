type Project {
    _id: ID!
    name: String!
    tagline: String
    creator: User!
    private: Boolean!
    due: GraphQLDateTime!
    markdown: String!
    createdAt: GraphQLDateTime!
    updatedAt: GraphQLDateTime! 
    tasks(input: ProjectTasksInput): ProjectTasksResponse!
    organization: Organization # todo field
}

# PROJECT.TASKS
# ------------------------------------
type ProjectTasksData {
    tasks: [Task]
}

type ProjectTasksResponse {
    hasNextPage: Boolean!
    data: ProjectTasksData
}

input ProjectTasksInput {
    page: Int! 
    limit: Int!
    search: String
    sort: String!
    user: Boolean!
}

# CREATE PROJECT
# ------------------------------------
input CreateProjectInput {
    name: String!
    tagline: String
    private: Boolean!
    due: String!
    markdown: String!
    organization: ID
}

type CreateProjectResponse {
    project: Project
    error: Error
}

# EDIT PROJECT 
# ------------------------------------
input EditProjectInput {
    id: ID!
    name: String!
    tagline: String
    private: Boolean!
    due: String!
    markdown: String!
}

type EditProjectData {
    project: Project
}

type EditProjectResponse {
    data: EditProjectData
    error: Error
}

# USER PROJECTS
# ------------------------------------
type UserProjectsData {
    projects: [Project]!
}

type UserProjectsResponse {
    hasNextPage: Boolean!
    data: UserProjectsData!
}

input UserProjectsInput {
    page: Int!
    limit: Int!
    sort: DateSortEnum!
    search: String
}

type Query {
    project(id: ID!): Project
    userProjects(input: UserProjectsInput!): UserProjectsResponse! @Auth(input: {required: true})
    publicProjects(input: UserProjectsInput!): UserProjectsResponse!
}

type Mutation {
    createProject(input: CreateProjectInput!): CreateProjectResponse! @Auth(input: {required: true})
    editProject(input: EditProjectInput!): EditProjectResponse! @Auth(input: {required: true})
}